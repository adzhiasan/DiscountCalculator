@page "/counter"
@using System.Linq.Expressions
@using System.Diagnostics
@rendermode InteractiveServer

<EditForm Model="@_my">
    <div class="form-group mb-3">
        <label for="count">Количество:</label>
        <InputNumber id="count" class="form-control" @bind-Value="_my.Count" />
    </div>

    <div class="form-group mb-3">
        <label for="price">Цена:</label>
        <InputNumber id="price" class="form-control" @bind-Value="_my.Price" />
    </div>

    <div class="form-group mb-3">
        <label for="price">Штат:</label>
        <InputSelect @bind-Value="@_my.State">
            @foreach (var option in _taxStates.Keys)
            {
            <option value="@option">@option</option>
            }
        </InputSelect>
    </div>
    
    <p>Сумма: @Calculate()</p>
    <p>Налог: @GetTax()%</p>
    <p>Скидка: @GetDiscount()%</p>
    <p><s>Цена без скидки: @GetPrimaryPrice()</s></p>
    <p>Налог в долларах: @GetTaxInDollars()</p>
</EditForm>

@code
{
    private readonly MyModel _my = new MyModel();
    private readonly Dictionary<string, decimal> _taxStates = new()
    {
        ["NV"] = 8,
        ["TX"] = 6.25m,
        ["UT"] = 6.85m,
        ["AL"] = 4,
        ["CA"] = 8.25m
    };
    /*
    private readonly Dictionary<decimal, decimal> _discountList = new()
    {
        [1000] = 3,
        [5000] = 5,
        [7000] = 7,
        [10000] = 10,
        [15000] = 15
    };
    */
    
    public class MyModel
    {
        public int Count { get; set; }
        public decimal Price { get; set; }
        public string State { get; set; } = "NV";
    }

    public decimal Calculate()
    {
        return GetPrimaryPrice() * (1 + GetTax() / 100) * (1 - GetDiscount() / 100);
    }

    public decimal GetTaxInDollars()
    {
        return GetPrimaryPrice() * (GetTax() / 100);
    }

    public decimal GetPrimaryPrice()
    {
        return _my.Count * _my.Price;
    }
    
    public decimal GetTax()
    {
        return _taxStates[_my.State];
    }

    public decimal GetDiscount()
    {
        var x = GetPrimaryPrice();
        switch (x)
        {
            case >= 15000:
                return 15;
            case >= 10000:
                return 10;
            case >= 7000:
                return 7;
            case >= 5000:
                return 5;
            case >= 1000:
                return 3;
            default:
                return 0;
        }

        
    }
}
